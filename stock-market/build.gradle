plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.70'
    id 'com.bmuschko.docker-remote-api' version '6.3.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.70'
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.github.dockerjava.api.exception.NotFoundException

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Main-Class': 'market.MainKt'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile group: 'io.ktor', name: 'ktor-server-netty', version: '1.3.1'
    compile group: 'io.ktor', name: 'ktor-client-apache', version: '1.3.1'
    compile group: 'com.typesafe', name: 'config', version: '1.4.0'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.testcontainers', name: 'testcontainers', version: '1.13.0'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task copyJar(type: Copy, dependsOn: jar) {
    from "build/libs/${rootProject.name}-${project.version}.jar"
    into 'build/docker'
    rename { String fileName -> fileName.replace("-${project.version}", "") }
}

task createDockerfile(type: Dockerfile, dependsOn: copyJar) {
    from 'openjdk:8'
    addFile("${rootProject.name}.jar", "/usr/src/jar/${rootProject.name}.jar")
    defaultCommand("java", "-jar", "/usr/src/jar/${rootProject.name}.jar")
}

task removeImage(type: DockerRemoveImage) {
    targetImageId("pavponn/${rootProject.name}:latest")
    onError { exc ->
        if (exc.message != null && !exc.message.contains('NotModifiedException')
                && exc.class != NotFoundException.class) {
            throw new RuntimeException(exc)
        }
    }
}

task buildImage(type: DockerBuildImage, dependsOn: [createDockerfile, removeImage]) {
    images.add("pavponn/${rootProject.name}:latest")
}

test.dependsOn buildImage
